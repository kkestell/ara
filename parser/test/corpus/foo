=================================================
foo
=================================================

import math;

var num1 = 10;
var num2 = 20;
var result = 0;
var message = "Hello, World!";
var isEven = true;
var isNull = null;

def add(num1, num2) {
    var result = num1 + num2;
    return result;
}

def greet(msg) {
    print(msg);
}

class Calculator {
    def add(num1, num2) {
        var result = num1 + num2;
        return result;
    }

    def subtract(num1, num2) {
        var result = num1 - num2;
        return result;
    }
}

def main() {
    if (num1 > num2) {
        print("num1 is greater");
    } else if (num1 < num2) {
        print("num2 is greater");
    } else {
        print("Both are equal");
    }

    for (var i in range(10)) {
        print(i);
    }

    while (num1 < num2) {
        print(num1);
        num1 = num1 + 1;
    }

    try {
        var num1 = num1 / 0;
    } catch (DivisionByZeroException e) {
        print("Cannot divide by zero");
    }

    greet(message);
}

-------------------------------------------------

(source_file
  (import_statement
    (identifier))
  (variable_declaration
    (identifier)
    (number))
  (variable_declaration
    (identifier)
    (number))
  (variable_declaration
    (identifier)
    (number))
  (variable_declaration
    (identifier)
    (string))
  (variable_declaration
    (identifier)
    (boolean))
  (variable_declaration
    (identifier)
    (null))
  (function_definition
    (identifier)
    (parameter_list
      (identifier)
      (identifier))
    (block
      (variable_declaration
        (identifier)
        (binary_expression
          (identifier)
          (identifier)))
      (return_statement
        (identifier))))
  (function_definition
    (identifier)
    (parameter_list
      (identifier))
    (block
      (expression_statement
        (function_call
          (identifier)
          (parameter_list
            (identifier))))))
  (class_definition
    (identifier)
    (class_body
      (class_statement
        (function_definition
          (identifier)
          (parameter_list
            (identifier)
            (identifier))
          (block
            (variable_declaration
              (identifier)
              (binary_expression
                (identifier)
                (identifier)))
            (return_statement
              (identifier)))))
      (class_statement
        (function_definition
          (identifier)
          (parameter_list
            (identifier)
            (identifier))
          (block
            (variable_declaration
              (identifier)
              (binary_expression
                (identifier)
                (identifier)))
            (return_statement
              (identifier)))))))
  (function_definition
    (identifier)
    (parameter_list)
    (block
      (if_statement
        (binary_expression
          (identifier)
          (identifier))
        (block
          (expression_statement
            (function_call
              (identifier)
              (parameter_list
                (string)))))
        (elif_statement
          (binary_expression
            (identifier)
            (identifier))
          (block
            (expression_statement
              (function_call
                (identifier)
                (parameter_list
                  (string))))))
        (else_statement
          (block
            (expression_statement
              (function_call
                (identifier)
                (parameter_list
                  (string)))))))
      (for_statement
        (identifier)
        (function_call
          (identifier)
          (parameter_list
            (number)))
        (block
          (expression_statement
            (function_call
              (identifier)
              (parameter_list
                (identifier))))))
      (while_statement
        (binary_expression
          (identifier)
          (identifier))
        (block
          (expression_statement
            (function_call
              (identifier)
              (parameter_list
                (identifier))))
          (assignment_statement
            (identifier)
            (binary_expression
              (identifier)
              (number)))))
      (try_statement
        (block
          (variable_declaration
            (identifier)
            (binary_expression
              (identifier)
              (number))))
        (identifier)
        (identifier)
        (block
          (expression_statement
            (function_call
              (identifier)
              (parameter_list
                (string))))))
      (expression_statement
        (function_call
          (identifier)
          (parameter_list
            (identifier)))))))